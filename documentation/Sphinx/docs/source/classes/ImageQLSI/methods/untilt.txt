.. dropdown:: **untilt**
    



    .. code-block:: python

        IM.untilt(options)
        IM2 = IM.untilt(options)
        IM.untilt('xy1',[1 10], 'xy2', [100 210])
        IM.untilt(Center = 'Manual')
        


            arguments
                objList
                % parameters for boxSelection()
                opt.xy1 = []
                opt.xy2 = []
                opt.Center = 'Auto' % 'Auto', 'Manual' or [x, y]
                opt.Size = 'Auto' % 'Auto', 'Manual', d or [dx, dy]
                opt.twoPoints logical = false
                opt.params double = double.empty() % = [x1, x2, y1, y2]
                opt.shape char {mustBeMember(opt.shape,{'square','rectangle','Square','Rectangle'})}= 'square'
                opt.app PhaseLABgui = PhaseLABgui.empty()
            end


    | ``n``, ``m`` are the orders of the Zernike moment.
    | ``r0`` is the radius of the area over which the Zerninke moment is calculated.



            function [objList2,params] = untilt(objList,opt) 
            function IMout = mean(IM,opt)
            function IM2 = smooth(IM,nn,hfigInit)
            function objList2 = square(objList)
            function objList2 = phase0(objList,option)
            function obj = setFcrops(obj,crops)
            function obj2 = binning(obj,n)
            function obj = setProcessingSoftware(obj,name)
            function [obj, params] = level0(obj0,opt)
            function obj2 = gauss(obj,nn)
            function obj = rot90(obj0,k)
            function obj = mirrorH(obj0)
            function obj = mirrorV(obj0)
            function val = get.DWn(obj)
            function val = DWnorm(obj)
            function val = D2Wnorm(obj)
            function val = PDCM(obj)
            function val = DM(obj)
            function PDCMdisplay(obj,hfig)
            function obj2List = download(objList)
            function save(objList,folder,varargin)
            function write(obj,obj_in)
            function IMout = propagation(IM, z, opt)
