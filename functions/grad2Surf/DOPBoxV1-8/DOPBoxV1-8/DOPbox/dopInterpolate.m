function [y, g] = dopInterpolate( polyCoeffs, recurrenceCoeffs, x );
%
% Purpose : This function computes interpolation for a gram polynomial
%   basis, given the polanomial coefficients and the recurrence
%   coefficients.
%
% Use (syntax):
%   [y, g] = dopInterpolate( polyCoeffs, recurrenceCoeffs, x );
%
% Input Parameters :
%   polyCoeffs: the coefficients of the Gram polynomial
%   recurrenceCoeffs: the alphas and betas as generated by the function
%           gramPolyDiffInterp.
%   x: a column vector of x values at which the interpolation is to be
%           performed.
%
% Return Parameters :
%   y: the interpolated y values
%   g: the interpolating basis functions
%
% Description and algorithms:
%
% References : see also the function "gramPolyDiffInterp"
%
% Author :  Paul O'Leary
% Date :    23. October 2012
% Version : 1.0
%
% (c) 2012 Paul O'Leary, Chair of Automation, University of Leoben, Leoben, Austria
% email: automation@unileoben.ac.at, url: automation.unileoben.ac.at
%
% History:
%   Date:           Comment:
%

noCoeffs = length(polyCoeffs);
%
% extract the alphas and betas for the recurrence relationahip
%
alpha = recurrenceCoeffs(:,1);
beta = recurrenceCoeffs(:,2);
%
% Prepare a matrix for the interpolating basisfunctions
%
g = zeros( length(x), noCoeffs);
%
% Generate the first two basis functions
%
g(:,1) = alpha(1);
g(:,2) = (x - beta(2) ) * alpha(2);
%
% Perform the recurrence computation
%
gt = g(:,2);
for k=3:noCoeffs
    g(:,k) = ( gt .* g(:,k-1) - beta(k) * g(:,k-2) ) * alpha(k);
end;
%
% Given the basis g now generate the result
%
y = g * polyCoeffs;