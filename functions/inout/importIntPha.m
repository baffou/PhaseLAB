%% FUNCTION THAT IMPORTS PHASE IMAGES GENERATED BY THE SID4BIO SOFTWARE FROM PHASICS S.A..
% 
% prefix: Phase image names should read ['EXPORT PHA ' prefix '_']
%         followed by a 4-digit number.
% MS:     Microscope object.
% folder: Folder where the images are contained.
% numf: number of files to be read.

% author: Guillaume Baffou
% affiliation: CNRS, Institut Fresnel
% date: Feb 1, 2018



function Image = importIntPha(folder,MI,IL)
% importIntPha(folder,MI,IL)
% folder: where to import the images from
% MI:     Microscope object
% IL:     An Illumination object, or an array of these.

    if ~isa(IL,'Illumination')
        error('error with the thrid input, supposed to be an Illumination object')
    end
    
    if ~isa(MI,'Microscope')
        error('error with the second input, supposed to be a Microscope object')
    end

%% Import the file T and OPD file names, and determine the number of images Nint.
    previousFolder = pwd;
    cd(folder);

    fileList = dir;
    NF = length(fileList);

    %Count the intensity and phase txt images
    % and building the name's list of the txt images
        
    if strcmp(MI(1).software,'Sid4Bio')

        Nint = 0;Npha = 0;
        for iF = 1:NF
            if strcmp(fileList(iF).name(1:min(end,10)),'EXPORT INT') && strcmp(fileList(iF).name(max(1,end-3):end),'.txt')
                Nint = Nint+1;
            end
            if strcmp(fileList(iF).name(1:min(end,10)),'EXPORT PHA') && strcmp(fileList(iF).name(max(1,end-3):end),'.txt')
                Npha = Npha+1;
            end
        end
        
        if Npha~=Nint
            error('Not the same number of phase and intensity images')
        end
        fileINT = repmat(struct('n',''),Nint,1);
        filePHA = fileINT;
        
        iint = 0;ipha = 0;
        for iF = 1:NF
            if strcmp(fileList(iF).name(1:min(end,10)),'EXPORT INT') && strcmp(fileList(iF).name(max(1,end-3):end),'.txt')
                iint = iint+1;
                fileINT(iint).n = fileList(iF).name;
            end
            if strcmp(fileList(iF).name(1:min(end,10)),'EXPORT PHA') && strcmp(fileList(iF).name(max(1,end-3):end),'.txt')
                ipha = ipha+1;
                filePHA(ipha).n = fileList(iF).name;
            end
        end
        
    elseif strcmp(MI(1).software,'PHAST')
    
        Nint = 0;Npha = 0;
        for iF = 1:NF
            if strcmp(fileList(iF).name(1:min(end,3)),'INT') && strcmp(fileList(iF).name(max(1,end-3):end),'.txt')
                Nint = Nint+1;
            end
            if strcmp(fileList(iF).name(1:min(end,3)),'PHA') && strcmp(fileList(iF).name(max(1,end-3):end),'.txt')
                Npha = Npha+1;
            end
        end
        
        if Npha~=Nint
            error('Not the same number of phase and intensity images')
        end
        fileINT = repmat(struct([]),Nint,1);
        filePHA = fileINT;
        
        iint = 0;ipha = 0;
        for iF = 1:NF
            if strcmp(fileList(iF).name(1:min(end,3)),'INT') && strcmp(fileList(iF).name(max(1,end-3):end),'.txt')
                iint = iint+1;
                fileINT(iint).n = fileList(iF).name;
            end
            if strcmp(fileList(iF).name(1:min(end,3)),'PHA') && strcmp(fileList(iF).name(max(1,end-3):end),'.txt')
                ipha = ipha+1;
                filePHA(ipha).n = fileList(iF).name;
            end
        end
    end
    
%% Arranging the Illumination/wavelength and Microscope data data
    ILlist = repmat(Illumination(),Nint,1);
    if length(IL)==1
        if length(IL.lambda)==1
            ILlist = repmat(IL,Nint,1);
        elseif length(IL.lambda)~=Nint
            error(['The number of images (' num2str(Nint) ') is not the number of specified lambda (' num2str(length(IL.lambda)) ')'])
        else % if Nint?1 and equals number of wavelengths, create independent IL objects.
            for il = 1:Nint
                ILlist(il) = Illumination(IL.lambda(il),Medium(IL.n,IL.nS),IL.I,IL.polar);
            end
        end
    elseif numel(IL)~=Nint
            error(['The number of images (' num2str(Nint) ') is not the number Illumination objects (' num2str(length(IL)) ')'])
    else
        ILlist = IL;
    end
    
    if numel(MI)==1
        MI = repmat(MI,Nint,1);
    elseif numel(MI)~=Nint
        error(['The number of images (' num2str(Nint) ') is not the number of specified Microscopes (' num2str(numel(MI)) ')'])
    end
        
    
%% Importing the images and create the ImageQLSI objects.  
    Image0 = ImageQLSI();
    Image = repmat(Image0,Nint,1);
    disp(['Importing ' num2str(Nint) ' images:'])
    for ii = 1:Nint
        % import images
        
        if 1 % replacing comas by dots
            Data = fileread(fileINT(ii).n);
            Data = strrep(Data, ',', '.');
            FID = fopen(fileINT(ii).n, 'w');
            fwrite(FID, Data, 'char');
            fclose(FID);
        end
        disp([num2str(ii) '- ' fileINT(ii).n])
        T = dlmread(fileINT(ii).n);
        if 1 % replacing comas by dots
            Data = fileread(filePHA(ii).n);
            Data = strrep(Data, ',', '.');
            FID = fopen(filePHA(ii).n, 'w');
            fwrite(FID, Data, 'char');
            fclose(FID);
        end
        OPD = dlmread(filePHA(ii).n)*1e-9;
        
        % create the ImageQLSI objects
        Image(ii)=ImageQLSI(T,OPD,MI(ii),ILlist(ii));
        Image(ii).folder = folder;
        Image(ii).Microscope = MI(ii);
        Image(ii).pxSize0 = MI(ii).pxSizePhasics;
        
        Image(ii).TfileName = fileINT(ii).n;
        Image(ii).OPDfileName = filePHA(ii).n;
        if strcmp(MI(ii).software,'Sid4Bio')
            Image(ii).imageNumber = str2double(filePHA(ii).n(end-7:end-4));
            Image(ii) = Image(ii).setProcessingSoftware('Sid4Bio');
        elseif strcmp(MI(ii).software,'PHAST')
            Image(ii).imageNumber = ii;
            Image(ii) = Image(ii).setProcessingSoftware('PHAST');
        end
    end

    %fprintf('--\n')
    cd(previousFolder)
end