Constructor
-----------

.. dropdown:: **Constructor**

    .. raw:: html
      
        <p class="title">Synthax</p>

    .. code-block:: matlab
        :class: custom-code

        obj = Interfero()
        obj = Interfero(n)
        obj = Interfero(fileName, MI)
        obj = Interfero(mat, MI)
        obj = Interfero(___,Name,Value)


    .. raw:: html
      
        <div class="title">Description</div>

    :matlab:`obj = Interfero()` creates an empty *Interfero* object.

    |hr|

    :matlab:`objList = Interfero(n)` create a *n*-vector ``objList`` of empty *Interfero* objects.

    |hr|

    :matlab:`obj = Interfero(fileName, MI)` creates a *Interfero* object ``obj`` from a specified file ``fileName`` and a given |Microscope| object ``MI``.

    |hr|

    :matlab:`obj = Interfero(mat, MI)` creates a *Interfero* object ``obj`` from a matrix ``mat`` and a given *Microscope* object ``MI``.

    |hr|

    The *Interfero* constructor accepts *Name-Value* options. 


    .. raw:: html
        
        <p class="title">Examples</p>
  
    .. dropdown:: **Build an Interfero object from matrices**

        .. code-block:: matlab

            itf = imread('data/Itf.tif');
            ref = imread('data/Ref.tif');

            MI = Microscope(100);     % creates a microscope with 100x magnification
            
            Itf = Interfero(itf, MI); % creates the Interfero object
            Itf.Reference(ref);       % associates the reference
    
    
    .. dropdown:: **Build an Interfero object from files**

        .. code-block:: matlab

            MI = Microscope(100);     % creates a microscope with 100x magnification
            
            Itf = Interfero('data/Itf.tif', MI); % creates the Interfero object
            Ref = Interfero('data/Ref.tif'; MI); % creates the reference Interfero object
            
            Itf.Reference(Ref);       % associates the reference

    .. dropdown:: **Automatic import from a folder**

        Usually to build Interfero objects, the constructor is not directly used. One often automatically import interferograms from a folder using :ref:`The_importItfRef_function`.

        .. code-block:: matlab

            CGcam = CGcamera('Silios_mono');
            MI = Microscope(100, 200, CGcam, 'PhaseLIVE'); % creates a microscope with 100x magnification
            
            Itf = importItfRef('data', MI);  % creates the Interfero object
            
     Itf is a vector of interferograms, and the reference are automatically detected provided a software (here |PhaseLIVE|) correctly indicated when defining the microscope ``MI``.

